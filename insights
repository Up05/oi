# remarks

Either have users register accounts
Use a hardware id + external ip?
Or use proof of work / hashcache


# odin-doc


Okay so, you give the `odin doc` command a directory, e.g.: `odin doc $ODIN_ROOT/core/simd` 
1. by default, it prints out tabbed list (1 tab = category, 2 tabs = declaration, 3 tabs = comment)

`odin doc -doc-format DIR`
writes a binary PACKAGE.odin-doc file. (in cwd at least by default)
(the flag -all-packages is also useful as of 2025-07, due to bug)


odin-doc, probably, has all you will need for a documentation tool.
but, so far as I know, you need to create a process for each directory. there (likely) is not a function.

To parse these files: 
```
data, _ := read_entire_file_from_path("simd.doc-format")

header, _ := doc.read_from_bytes(data)

entities /* -- declarations, ect. */ := doc.from_array(&header.base, header.entities)

fmt.println(entities)
```

The binary files are just:
```
┏━━━━━━━━━━━━━━━━━━━━┓
┃   .odin-doc file   ┃
┣━━━━━━━━━━━━━━━━━━━━┫
┃ base │ HEADER      ┃
┃──────┘             ┃
┠────────────────────┨
┃                    ┃
┃        DATA        ┃
┃                    ┃
┗━━━━━━━━━━━━━━━━━━━━┛ 
```


`doc-format.Array`s are just arrays of byte offsets, this is how they are implemented:
```odin
from_array :: proc(base: ^Header_Base, a: $A/Array($T)) -> []T {
	s: mem.Raw_Slice
	s.data = rawptr(uintptr(base) + uintptr(a.offset))
	s.len = int(a.length)
	return transmute([]T)s
}
```

in C it would literally just be:
```C
struct Array { int len; int offset; };
void* from_array(Header_Base* base, struct Array a) {
    return ((byte*) base) + a.offset;
} 
``` 
*not necessarily valid C, I can't be arsed to check it*

## Header.pkgs

at least, if we use -all-packages comp flag,
the header contains literally all (used?) packages
to get a specific package you must go through all packages
and get the one with the .Init flag:
```
the_package: Package
for i in 0..<header.pkgs.length {
    p := doc.from_array(&header.base, header.pkgs)[i]
    if .Init in p.flags do the_package = p
}
```
Same with header.files, 
~~however, header.entities seems fine.~~
never-the-fuck-mind-that there thingy.
all entities for all packages. (also header.types just seems useless)

If you want to get a list of entities in this package you need to do this:
```
entities := doc.from_array(&header.base, header.entities)
entries := doc.from_array(&header.base, the_package.entries)
for entry in entries {
    declaration := entities[entry.entity]
    is_any_kind :: proc(a: doc.Entity_Kind, b: ..doc.Entity_Kind) -> bool { return is_any(a, ..b) }
    if is_any_kind(declaration .kind, .Type_Name) {
        fmt.println(to_string(data, declaration.name), "::", to_string(data, declaration.init_string))

        // ... do shit with the type declaration now...

    }
}
```
1. get the current package  (it will be the one with .Init flag)
2. the current package contains an array of "scope entries" (entities declared in it)
3. get ALL entities (from the header.entities)
4. look up index (that you get from each scope entry) from ALL entities
5. there.

## Types

Just don't fucking use them. 
"entity.type"? What's that?

Look up the package by name before '.'
if you got it: good
if you didn't it's a struct or whatever

look up the var name inside of the package...

I spent 2 days on this, whatever...

*you can get like struct and enum members by:* `entity.type[*].types.entities.types` *OR SMTH*
and you can kinda get function parameters by entity.type[...].types.entities

idk, i didn't find returns...

There's also this:
https://github.com/odin-lang/pkg.odin-lang.org/blob/master/main.odin#L1097
good luck!

my recomendation:
    1. as you're caching the files, make a `map [file] map [import_alias] package_name` file
    2.  a) later, as you're looping through entity bodies,
        b) have some state, like `may_be_type: bool`
        c) `if this_token.kind == .Colon do may_be_type = true`; `if this_token.kind == .Comma || is_actually_type do may_be_type = false`
        d) `if may_be_type && prev_token.kind == .Period && next_token.text in packages[ package_aliasses[this_file][prev_prev_token.text] ].entities`
        e) I DON'T KNOWWWWWW




